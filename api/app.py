# Vercel Serverless: PDF Merge + Index
# Note: This function expects to run on Vercel's Python runtime.
# It accepts multipart/form-data with files field 'pdfs' and returns a merged PDF with index.
import tempfile, os, sys
from io import BytesIO

from PyPDF2 import PdfReader, PdfWriter
from fpdf import FPDF

def app(environ, start_response):
    try:
        # Read body
        try:
            size = int(environ.get('CONTENT_LENGTH', 0))
        except:
            size = 0
        body = environ['wsgi.input'].read(size) if size else b''
        content_type = environ.get('CONTENT_TYPE','')
        boundary = None
        if 'boundary=' in content_type:
            boundary = ('--' + content_type.split('boundary=')[-1]).encode('utf-8')
        parts = body.split(boundary) if boundary else []
        files = []
        for part in parts:
            if b'Content-Disposition' in part and b'filename="' in part:
                try:
                    header, filedata = part.split(b'\r\n\r\n', 1)
                except:
                    continue
                filedata = filedata.rstrip(b'\r\n--')
                try:
                    disp = header.decode('latin1').split('\r\n')[0]
                    fname = disp.split('filename="')[-1].split('"')[0]
                except:
                    fname = 'file.pdf'
                files.append((fname, BytesIO(filedata)))
        if not files:
            start_response('400 Bad Request', [('Content-Type','text/plain')])
            return [b'No PDF files uploaded.']

        merger = PdfWriter()
        index_entries = []
        current_page = 1
        for fname, bio in files:
            reader = PdfReader(bio)
            num_pages = len(reader.pages)
            start = current_page
            end = current_page + num_pages - 1
            for p in reader.pages:
                merger.add_page(p)
            index_entries.append((fname, start, end))
            current_page = end + 1

        merged_buf = BytesIO()
        merger.write(merged_buf)
        merged_buf.seek(0)

        pdf = FPDF()
        pdf.set_auto_page_break(auto=True, margin=15)
        pdf.add_page()
        pdf.set_font('Arial', 'B', 14)
        pdf.cell(0, 10, 'Index / Table of Contents', ln=True, align='C')
        pdf.ln(6)
        pdf.set_font('Arial', size=12)
        for i, (fn, st, en) in enumerate(index_entries, start=1):
            line = f"{i}. {fn}  →  Pages {st}–{en}"
            pdf.multi_cell(0, 8, line)
        pdf.ln(4)
        pdf.set_font('Arial', size=10)
        pdf.multi_cell(0, 6, 'Generated by Vercel PDF Merge + Index')
        index_buf = BytesIO()
        pdf.output(index_buf)
        index_buf.seek(0)

        final_writer = PdfWriter()
        idx_reader = PdfReader(index_buf)
        for p in idx_reader.pages:
            final_writer.add_page(p)
        merged_reader = PdfReader(merged_buf)
        for p in merged_reader.pages:
            final_writer.add_page(p)
        out_buf = BytesIO()
        final_writer.write(out_buf)
        out_buf.seek(0)

        headers = [
            ('Content-Type', 'application/pdf'),
            ('Content-Disposition', 'attachment; filename="merged_with_index.pdf"'),
            ('Content-Length', str(len(out_buf.getvalue())))
        ]
        start_response('200 OK', headers)
        return [out_buf.getvalue()]
    except Exception as e:
        start_response('500 Internal Server Error', [('Content-Type','text/plain')])
        return [str(e).encode('utf-8')]
